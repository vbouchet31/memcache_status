<?php

use Drupal\Core\Cache\Cache;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_data().
 */
function memcache_status_views_data() {
  return [
    'memcache_status_dump_data' => [
      'table' => [
        'group' => t('Memcache status'),
        'provider' => 'memcache_status',
        'base' => [
          'field' => 'cas',
          'title' => t('Memcache items'),
        ],
      ],
      'server' => [
        'title' => t('Server'),
        'field' => [
          'id' => 'standard',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'dropdown',
        ],
        'argument' => [
          'id' => 'string',
        ],
      ],
      'bin' => [
        'title' => t('Bin'),
        'field' => [
          'id' => 'standard',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'dropdown',
        ],
        'argument' => [
          'id' => 'string',
        ],
      ],
      'slab' => [
        'title' => t('Slab'),
        'field' => [
          'id' => 'numeric',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'numeric',
        ],
        'argument' => [
          'id' => 'numeric',
        ],
      ],
      'expire' => [
        'title' => t('Expire'),
        'field' => [
          'id' => 'numeric',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'numeric',
        ],
        'argument' => [
          'id' => 'numeric',
        ],
      ],
      'last_access' => [
        'title' => t('Last access'),
        'field' => [
          'id' => 'date',
        ],
        'sort' => [
          'id' => 'date',
        ],
        'filter' => [
          'id' => 'date',
        ],
      ],
      'cid' => [
        'title' => t('Cid'),
        'field' => [
          'id' => 'standard',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'string',
        ],
        'argument' => [
          'id' => 'string',
        ],
      ],
      'raw_key' => [
        'title' => t('Raw key'),
        'field' => [
          'id' => 'standard',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'string',
        ],
        'argument' => [
          'id' => 'string',
        ],
      ],
      'fetched' => [
        'title' => t('Fetched'),
        'field' => [
          'id' => 'boolean',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'boolean',
          'label' => t('Fetched'),
          'type' => 'yes-no',
          'use_equal' => TRUE,
        ],
      ],
      'size' => [
        'title' => t('Size'),
        'field' => [
          'id' => 'file_size',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'numeric',
        ],
        'argument' => [
          'id' => 'numeric',
        ],
      ],
      'cas' => [
        'title' => t('CAS'),
        'field' => [
          'id' => 'numeric',
        ],
        'sort' => [
          'id' => 'standard',
        ],
        'filter' => [
          'id' => 'numeric',
        ],
        'argument' => [
          'id' => 'numeric',
        ],
      ],
      'memcache_item_bulk_form' => [
        'title' => t('Memcache item operations bulk form'),
        'help' => t('Add a form element that lets you run operations on multiple memcache items.'),
        'field' => [
          'id' => 'memcache_item_bulk_form',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_views_post_render().
 */
function memcache_status_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  if ($view->id() !== 'memcache_items') {
    return;
  }

  // Add a custom cache tag, so we can invalidate the result after refreshing
  // the memcache items in the database.
  $output['#cache']['tags'] = Cache::mergeTags($output['#cache']['tags'] ?? [], ['memcache_list:items']);
}

/**
 * Implements hook_views_pre_view().
 */
function memcache_status_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() !== 'memcache_items') {
    return;
  }

  // If there is only one memcache server, there is no need to expose it.
  if (count(Settings::get('memcache')['servers']) === 1) {
    $view->removeHandler($view->current_display, 'filter', 'server');
    $view->removeHandler($view->current_display, 'field', 'server');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function memcache_status_views_pre_render($view) {
  if ($view->id() !== 'memcache_items') {
    return;
  }

  $last_refresh_time = \Drupal::state()->get('memcache_status.last_dump_data_refresh_time');

  // Remove the exposed form if the table is empty.
  if (empty($last_refresh_time)) {
    $view->exposed_widgets = [];

    $view->attachment_before[] = [
      '#type' => 'fieldset',
      [
        '#markup' => t('Memcache data dump has not been executed yet.'),
      ],
      [
        '#type' => 'link',
        '#title' => t('Fetch data'),
        '#url' => Url::fromUri('base:/admin/reports/memcache-status/items/refresh'),
        '#attributes' => [
          'class' => ['button', 'button--primary'],
          'style' => 'margin-left: var(--space-s);'
        ],
      ],
    ];
  }
  else {
    $view->attachment_before[] = [
      '#prefix' => '<p class="text-align-left align-left">',
      '#suffx' => '</p>',
      '#markup' => t('Items @from - @to of @total', [
        '@from' => ($view->getItemsPerPage() * $view->getCurrentPage()) + 1,
        '@to' => ($view->getItemsPerPage() * $view->getCurrentPage()) + count($view->result),
        '@total' => $view->total_rows,
      ]),
    ];

    $view->attachment_before[] = [
      '#prefix' => '<p class="text-align-right align-right">',
      '#suffx' => '</p>',
      '#markup' => t('Last refresh: @refresh_date - <a href="/admin/reports/memcache-status/items/refresh">Refresh</a>', ['@refresh_date' => \Drupal::service('date.formatter')->format($last_refresh_time)]),
    ];
  }

  // The raw key is stored decoded in the database.
  foreach ($view->result as $index => $result) {
    $view->result[$index]->memcache_status_dump_data_raw_key = rawurlencode(urlencode($view->result[$index]->memcache_status_dump_data_raw_key));
  }
}

/**
 * Batch processor to refresh items in the database.
 */
function memcache_status_process_refresh_batch(string $server, string $slab_ids, &$context) {
  [$host, $port] = explode(':', $server);
  $items = \Drupal::service('memcache_status.memcache_helper')->sendMemcacheCommand('lru_crawler metadump ' . $slab_ids, $host, $port, 'parseDumpResult');

  if (empty($items)) {
    return;
  }

  if (!isset($context['results']['items'])) {
    $context['results']['items'] = 0;
  }

  $query = Drupal::database()->insert('memcache_status_dump_data')
    ->fields(['server', 'bin', 'slab', 'key_prefix', 'cid', 'expire', 'last_access', 'cas', 'fetched', 'size', 'raw_key']);
  foreach ($items as $item) {
    // Skip the items which are not related to this site.
    // @TODO: Add a configuration so it is possible to not filter. We may
    // need to add the key_prefix in the database to allow filtering.
    if (!empty(Settings::get('memcache')['key_prefix']) && $item['key_prefix'] !== Settings::get('memcache')['key_prefix']) {
      continue;
    }
    $query->values($item);
    $context['results']['items']++;
  }
  $query->execute();
}

/**
 * Finish function for the batch refreshing the items in the database.
 */
function memcache_status_finish_refresh_batch($success, $results, $operations) {
  Cache::invalidateTags(['memcache_list:items']);
  Drupal::state()->set('memcache_status.last_dump_data_refresh_time', time());
}
